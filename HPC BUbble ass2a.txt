#include <iostream>
#include <vector>
#include <chrono>
#include <iomanip>
#include <omp.h>

using namespace std::chrono;
using namespace std;

void bubbleSortSequential(int arr[], int n)
{
    auto start = high_resolution_clock::now();
    for (int i = 0; i < n - 1; i++)
    {
        for (int j = 0; j < n - i - 1; j++)
        {
            if (arr[j] > arr[j + 1])
            {
                swap(arr[j], arr[j + 1]);
            }
        }
    }
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<nanoseconds>(stop - start).count() / 1e9;
    cout << "Sequential Bubble Sort Execution Time: " << fixed << setprecision(10) << duration << " seconds" << endl;
}

void bubbleSortParallel(int arr[], int n)
{
    auto start = high_resolution_clock::now();
#pragma omp parallel
    {
        for (int i = 0; i < n - 1; i++)
        {
#pragma omp for
            for (int j = 0; j < n - i - 1; j++)
            {
                if (arr[j] > arr[j + 1])
                {
                    swap(arr[j], arr[j + 1]);
                }
            }
        }
    }
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<nanoseconds>(stop - start).count() / 1e9;
    cout << "Parallel Bubble Sort Execution Time: " << fixed << setprecision(10) << duration << " seconds" << endl;
}

int main()
{
    int n;
    cout << "Enter the number of elements: ";
    cin >> n;

    int *arr = new int[n];
    cout << "Enter the elements:\n";
    for (int i = 0; i < n; i++)
    {
        cin >> arr[i];
    }

    // Sequential Bubble Sort

    bubbleSortSequential(arr, n);

    cout << "Sorted array using sequential bubble sort:\n";
    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
    }

    // Parallel Bubble Sort
    bubbleSortParallel(arr, n);
    cout << "\nSorted array using parallel bubble sort:\n";
    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
    }
    return 0;
}
